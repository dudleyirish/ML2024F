%% usage: SVM_Columns ()
%%
%% filepath -- The input data file in csv format
%% ofile -- the output file write in octave mat format
%% train_flag -- 1 if training data, 0 if test data
%%
%% This prepares the data to train a SVM.
%%
function SVM_Columns ()
  workclass = containers.Map({"?", "Private", "Self-emp-not-inc", ...
			      "Self-emp-inc", "Federal-gov", ...
			      "Local-gov", "State-gov", "Without-pay", ...
			      "Never-worked"}, 1:9);
  education = containers.Map({"Bachelors", "Some-college", "11th", ...
			      "HS-grad", "Prof-school", "Assoc-acdm", ...
			      "Assoc-voc", "9th", "7th-8th", "12th", ...
			      "Masters", "1st-4th", "10th", "Doctorate", ...
			      "5th-6th", "Preschool"}, 1:16);
  marital = containers.Map({"Married-civ-spouse", "Divorced", ...
			    "Never-married", "Separated", "Widowed", ...
			    "Married-spouse-absent", ...
			    "Married-AF-spouse"}, 1:7);
  occupation = containers.Map({"?", "Tech-support", "Craft-repair", ...
			       "Other-service", "Sales", ...
			       "Exec-managerial", "Prof-specialty", ...
			       "Handlers-cleaners", "Machine-op-inspct", ...
			       "Adm-clerical", "Farming-fishing", ...
			       "Transport-moving", "Priv-house-serv", ...
			       "Protective-serv", "Armed-Forces"}, 1:15);
  relationship = containers.Map({"Wife", "Own-child", "Husband", ...
				 "Not-in-family", "Other-relative", ...
				 "Unmarried"}, 1:6);
  race = containers.Map({"White", "Asian-Pac-Islander", ...
			 "Amer-Indian-Eskimo", "Other", "Black"}, 1:5);
  sex = containers.Map({"Female", "Male"}, 1:2);
  native_country = containers.Map({"?", "United-States", "Cambodia", ...
				   "England", "Puerto-Rico", "Canada", ...
				   "Germany", ...
				   "Outlying-US(Guam-USVI-etc)", ...
				   "India", "Japan", "Greece", "South", ...
				   "China", "Cuba", "Iran", "Honduras", ...
				   "Philippines", "Italy", "Poland", ...
				   "Jamaica", "Vietnam", "Mexico", ...
				   "Portugal", "Ireland", "France", ...
				   "Dominican-Republic", "Laos", ...
				   "Ecuador", "Taiwan", "Haiti", ...
				   "Columbia", "Hungary", "Guatemala", ...
				   "Nicaragua", "Scotland", "Thailand", ...
				   "Yugoslavia", "El-Salvador", ...
				   "Trinadad&Tobago", "Peru", "Hong", ...
				   "Holand-Netherlands"}, 1:42);
  %% compute the number of output columns
  cols_out = 110;
  printf("Columns in the output: %d\n", cols_out);

  %% Convert strings to numbers and numeric to bools
  idx = 1;
  printf("Column age = %d\n", idx);
  idx = idx + 1;
  printf("Column workclass = %d\n", idx);
  idx = idx + workclass.Count;
  printf("Column fnlwgt = %d\n", idx);
  idx = idx + 1;
  printf("Column education = %d\n", idx);
  idx = idx + education.Count;
  printf("Column education-num = %d\n", idx);
  idx = idx + 1;
  printf("Column marital = %d\n", idx);
  idx = idx + marital.Count;
  printf("Column occupation = %d\n", idx);
  idx = idx + occupation.Count;
  printf("Column relationship = %d\n", idx);
  idx = idx + relationship.Count;
  printf("Column race = %d\n", idx);
  idx = idx + race.Count;
  printf("Column sex = %d\n", idx);
  idx = idx + sex.Count;
  printf("Column capital-gain = %d\n", idx);
  idx = idx + 1;
  printf("Column capital-loss = %d\n", idx);
  idx = idx + 1;
  printf("Column hours-per-week = %d\n", idx);
  idx = idx + 1;
  printf("Column native_country = %d\n", idx);
  idx = idx + native_country.Count;
  printf("Column income>50k = %d\n", idx);
end
